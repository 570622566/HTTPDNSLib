package com.sina.util.dnscache;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONObject;

import android.content.Context;
import android.content.SharedPreferences;
import android.util.Log;

import com.sina.util.dnscache.httpdns.HttpDnsConfig;
import com.sina.util.dnscache.httpdns.requests.ApacheHttpClientNetworkRequests;
import com.sina.util.dnscache.httpdns.requests.INetworkRequests;
import com.sina.util.dnscache.score.PlugInManager;
import com.sina.util.dnscache.score.ScoreManager;
import com.sina.util.dnscache.speedtest.SpeedtestManager;

/**
*
* 项目名称: DNSCache <br>
* 类名称: DNSCacheConfig <br>
* 类描述: Lib库全局 配置文件 <br>
* 创建人: fenglei <br>
* 创建时间: 2015-4-21 下午5:26:04 <br>
* 
* 修改人:  <br>
* 修改时间:  <br>
* 修改备注:  <br>
* 
* @version V1.0
*/
public class DNSCacheConfig {

	/**
	 * 调试 开关
	 */
	public static boolean DEBUG = true;

	/**
	 * 配置文件更新地址
	 */
	private static String ConfigText_API = "" ; 
	
	/**
	 * 设置 动态更新配置参数服务器url连接
	 */
	public static void SetConfigApiUrl(String url){
		DNSCacheConfig.ConfigText_API = url ; 
	}
	

	/**
	 * 初始化 配置文件
	 * @param ctx
	 */
	public static void InitCfg(final Context ctx) {

		SharedPreferences sharedPreferences = ctx.getSharedPreferences("HttpDNSConstantsJson", Context.MODE_PRIVATE); // 私有数据
		
		try {

			String text = sharedPreferences.getString("ConfigText", "" );
			
			if( text == null || text.equals("") ){
				text = Data.toJson(); 
				Log.d("TAG_NET", "text = " + text) ;
			}
			
			JSONObject jsonObj = new JSONObject(text);
			
			//
			if (jsonObj.isNull("IS_MY_HTTP_SERVER") == false) {
				String IS_MY_HTTP_SERVER = jsonObj.getString("IS_MY_HTTP_SERVER");
				HttpDnsConfig.isSinaHttpDns = IS_MY_HTTP_SERVER.equals("1") == true;
			}
			if (jsonObj.isNull("HTTPDNS_SERVER_API") == false) {
				HttpDnsConfig.HTTPDNS_SERVER_API = jsonObj.getString("HTTPDNS_SERVER_API");
			}
			if (jsonObj.isNull("DNSPOD_SERVER_API") == false) {
				HttpDnsConfig.DNSPOD_SERVER_API = jsonObj.getString("DNSPOD_SERVER_API");
			}

			
			//
			if (jsonObj.isNull("IS_SORT") == false) {
				String IS_SORT = jsonObj.getString("IS_SORT");
				ScoreManager.IS_SORT = IS_SORT.equals("1") == true;
			}
			if (jsonObj.isNull("SPEEDTEST_PLUGIN_NUM") == false) {
				String SPEEDTEST_PLUGIN_NUM = jsonObj.getString("SPEEDTEST_PLUGIN_NUM");
				if( isNum(SPEEDTEST_PLUGIN_NUM) ){
					PlugInManager.SpeedTestPluginNum = Float.valueOf( SPEEDTEST_PLUGIN_NUM ) ;
				}
			}
			if (jsonObj.isNull("PRIORITY_PLUGIN_NUM") == false) {
				String PRIORITY_PLUGIN_NUM = jsonObj.getString("PRIORITY_PLUGIN_NUM");
				if( isNum(PRIORITY_PLUGIN_NUM) ){
					PlugInManager.PriorityPluginNum = Float.valueOf( PRIORITY_PLUGIN_NUM ) ;
				}
			}
			if (jsonObj.isNull("SUCCESSNUM_PLUGIN_NUM") == false) {
				String SUCCESSNUM_PLUGIN_NUM = jsonObj.getString("SUCCESSNUM_PLUGIN_NUM");
				if( isNum(SUCCESSNUM_PLUGIN_NUM) ){
					PlugInManager.SuccessNumPluginNum = Float.valueOf( SUCCESSNUM_PLUGIN_NUM ) ;
				}
			}
			if (jsonObj.isNull("ERRNUM_PLUGIN_NUM") == false) {
				String ERRNUM_PLUGIN_NUM = jsonObj.getString("ERRNUM_PLUGIN_NUM");
				if( isNum(ERRNUM_PLUGIN_NUM) ){
					PlugInManager.ErrNumPluginNum = Float.valueOf( ERRNUM_PLUGIN_NUM ) ;
				}
			}
			if (jsonObj.isNull("SUCCESSTIME_PLUGIN_NUM") == false) {
				String SUCCESSTIME_PLUGIN_NUM = jsonObj.getString("SUCCESSTIME_PLUGIN_NUM");
				if( isNum(SUCCESSTIME_PLUGIN_NUM) ){
					PlugInManager.SuccessTimePluginNum = Float.valueOf( SUCCESSTIME_PLUGIN_NUM ) ;
				}
			}
			
			
			//
			if (jsonObj.isNull("SPEEDPATH_LIST") == false) {
				JSONArray jsonArr = jsonObj.getJSONArray("SPEEDPATH_LIST") ; 
				for( int i = 0 ; i < jsonArr.length() ; i++ ){
					String temp = jsonArr.getString(i) ;
					String[] keyV = temp.split(";") ;
					if( keyV.length == 2 ){
						SpeedtestManager.ServerSpeedPaht.put(keyV[0], keyV[1]) ;
					}
				}
			}
		

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			
			// 上报错误
			SharedPreferences.Editor editor = sharedPreferences.edit(); 
			editor.putString("ConfigText", "") ;
			boolean is = editor.commit() ;
			if( is ) InitCfg(ctx);
		}
		
		updataCfg(ctx);
	}
	
	
	/**
	 * 更新配置文件
	 */
	private static void updataCfg( final Context ctx ){
		
		if( ConfigText_API == null || ConfigText_API.equals("") ) return ;
		
		new Thread( new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				INetworkRequests netWork = new ApacheHttpClientNetworkRequests() ;
				String str = netWork.requests(ConfigText_API) ; 
				if( ctx != null ){
					SharedPreferences sharedPreferences = ctx.getSharedPreferences("HttpDNSConstantsJson", Context.MODE_PRIVATE); 
					SharedPreferences.Editor editor = sharedPreferences.edit(); 
					editor.putString("ConfigText", str) ;
					editor.commit() ;
				}
			}
		} ).start();
	}
	
	
	

	/**
	 * 是否为数字
	 * @param str
	 * @return
	 */
	private static boolean isNum(String str){
		return str.matches("^[-+]?(([0-9]+)([.]([0-9]+))?|([.]([0-9]+))?)$");
	}
	
	
	/**
	 * http dns lib 库可配置动态参数项
	 * @author fenglei
	 */
	public static class Data{
		
		/**
		 * 是否启用自己家的HTTP_DNS服务器  默认不启用 | 1启用 0不启用
		 */
		public static String IS_MY_HTTP_SERVER = null ; 
		/**
		 * 自己家HTTP_DNS服务API地址 使用时直接在字符串后面拼接domain地址 | 示例（http://202.108.7.153/dns?domain=）+ domain
		 */
		public static String HTTPDNS_SERVER_API = null ; 
		/**
		 * DNSPOD HTTP_DNS 服务器API地址 | 默认（http://119.29.29.29/d?ttl=1&dn=）
		 */
		public static String DNSPOD_SERVER_API = null ; 
		/**
		 * DNSPOD 企业级ID配置选项 （为了安全，该参数不支持云端动态配置）
		 */
		public static String DNSPOD_ID = null ; 
		/**
		 * DNSPOD 企业级KEY配置选项 （为了安全，该参数不支持云端动态配置）
		 */
		public static String DNSPOD_KEY = null ; 
		
		/**
		 * 是否开启 本地排序插件算法 默认开启 | 1开启 0不开启
		 */
		public static String IS_SORT = null ; 
		/**
		 * 速度插件 比重分配值：默认40%
		 */
		public static String SPEEDTEST_PLUGIN_NUM = null ;
		/**
		 * 服务器推荐优先级插件 比重分配：默认30% （需要自家HTTP_DNS服务器支持）
		 */
		public static String PRIORITY_PLUGIN_NUM = null ; 
		/**
		 * 历史成功次数计算插件 比重分配：默认10% 
		 */
		public static String SUCCESSNUM_PLUGIN_NUM = null ; 
		/**
		 * 历史错误次数计算插件 比重分配：默认10%
		 */
		public static String ERRNUM_PLUGIN_NUM = null ; 
		/**
		 * 最后一次成功时间计算插件 比重分配：默认10%
		 */
		public static String SUCCESSTIME_PLUGIN_NUM = null ; 
		/**
		 * domain对应的测速文件，如果需要对服务器进行测速请给domain设置一个可以下载的资源文件来计算服务器速度
		 */
		public static ArrayList<String> SPEEDPATH_LIST = new ArrayList<String>() ; 		
		
		static{
			
			Data.IS_MY_HTTP_SERVER = "1" ;
			Data.HTTPDNS_SERVER_API = "http://202.108.7.153/dns?domain=" ; 
			Data.DNSPOD_SERVER_API = "http://119.29.29.29/d?ttl=1&dn=" ;
			
			Data.DNSPOD_ID = "22" ; 
			Data.DNSPOD_KEY = "j2cjxCp2" ; 
			
			Data.IS_SORT = "1" ; 
			Data.SPEEDTEST_PLUGIN_NUM = "40" ; 
			Data.PRIORITY_PLUGIN_NUM = "30" ;
			Data.SUCCESSNUM_PLUGIN_NUM = "10" ;
			Data.ERRNUM_PLUGIN_NUM = "10";
			Data.SUCCESSTIME_PLUGIN_NUM = "10" ; 
			
			SPEEDPATH_LIST.add("api.weibo.cn;index.html") ;
			Data.SPEEDPATH_LIST.add("ww1.sinaimg.cn;bmiddle/c260f7abjw1et6exmrh3vj20c808gmxl.jpg") ;
			Data.SPEEDPATH_LIST.add("ww2.sinaimg.cn;bmiddle/c260f7abjw1et6exmrh3vj20c808gmxl.jpg") ;
			Data.SPEEDPATH_LIST.add("ww3.sinaimg.cn;bmiddle/c260f7abjw1et6exmrh3vj20c808gmxl.jpg") ;
			Data.SPEEDPATH_LIST.add("ww4.sinaimg.cn;bmiddle/c260f7abjw1et6exmrh3vj20c808gmxl.jpg") ;
			Data.SPEEDPATH_LIST.add("ww5.sinaimg.cn;bmiddle/c260f7abjw1et6exmrh3vj20c808gmxl.jpg") ;
			
		}
		
		/**
		 * 返回配置文件 json 
		 */
		public static String toJson(){
			// 为了节约lib库的大小直接拼接 json 字符串吧，就不适用第三方库了
			StringBuffer buffer = new StringBuffer() ; 
			buffer.append( "{" ) ;
				buffer.append( "\"IS_MY_HTTP_SERVER\":" + "\"" + Data.IS_MY_HTTP_SERVER + "\",") ;
				buffer.append( "\"HTTPDNS_SERVER_API\":" + "\"" + Data.HTTPDNS_SERVER_API + "\",") ;
				buffer.append( "\"DNSPOD_SERVER_API\":" + "\"" + Data.DNSPOD_SERVER_API + "\",") ;
				buffer.append( "\"IS_SORT\":" + "\"" + Data.IS_SORT + "\",") ;
				buffer.append( "\"SPEEDTEST_PLUGIN_NUM\":" + "\"" + Data.SPEEDTEST_PLUGIN_NUM + "\",") ;
				buffer.append( "\"PRIORITY_PLUGIN_NUM\":" + "\"" + Data.PRIORITY_PLUGIN_NUM + "\",") ;
				buffer.append( "\"SUCCESSNUM_PLUGIN_NUM\":" + "\"" + Data.SUCCESSNUM_PLUGIN_NUM + "\",") ;
				buffer.append( "\"ERRNUM_PLUGIN_NUM\":" + "\"" + Data.ERRNUM_PLUGIN_NUM + "\",") ;
				buffer.append( "\"SUCCESSTIME_PLUGIN_NUM\":" + "\"" + Data.SUCCESSTIME_PLUGIN_NUM + "\",") ;
				buffer.append( "\"SPEEDPATH_LIST\":" + "[") ;
				for (int i = 0; i < SPEEDPATH_LIST.size(); i++) {
					buffer.append( "\"" +  SPEEDPATH_LIST.get(i)  + "\"" + ( i != SPEEDPATH_LIST.size() -1 ? "," : "" ) ) ;
				}
				buffer.append( "]") ;
			buffer.append( "}" ) ;
			return buffer.toString() ;
		}
		
		
	}

}
